----- GRN_DETAILS: GRN_TOTAL_PAYMENT = COM_PRICE * COM_QUANTITY

---- TRIGGER FOR DELETED = TRIGGER FOR UPDATE(STATUS)

CREATE OR ALTER TRIGGER TG_GRN_DETAILS_TOTAL_PAYMENT_INSERT
ON GRN_DETAILS AFTER INSERT
AS
BEGIN
	DECLARE @COM_QUANT INT, @PRICE_COM MONEY, @INDEX INT
	DECLARE CUR CURSOR FOR
		SELECT GRN_ORDINAL_NUM, COM_PRICE, COM_QUANTITY FROM INSERTED

	OPEN CUR
	FETCH NEXT FROM CUR INTO @INDEX, @PRICE_COM, @COM_QUANT

	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE GRN_DETAILS SET GRN_TOTAL_PAYMENT = @COM_QUANT * @PRICE_COM
			WHERE GRN_ORDINAL_NUM = @INDEX
		FETCH NEXT FROM CUR INTO @INDEX, @PRICE_COM, @COM_QUANT
	END

	CLOSE CUR
	DEALLOCATE CUR
END
select * from REVENUE_DETAILS
GO

CREATE OR ALTER TRIGGER TG_GRN_DETAILS_TOTAL_PAYMENT_UPDATE
ON GRN_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(COM_QUANTITY) OR UPDATE(COM_PRICE))
	BEGIN
		DECLARE @COM_QUANT INT, @PRICE_COM MONEY, @INDEX INT
		DECLARE CUR CURSOR FOR
			SELECT GRN_ORDINAL_NUM, COM_PRICE, COM_QUANTITY FROM INSERTED

		OPEN CUR
		FETCH NEXT FROM CUR INTO @INDEX, @PRICE_COM, @COM_QUANT

		WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE GRN_DETAILS SET GRN_TOTAL_PAYMENT = @COM_QUANT * @PRICE_COM
				WHERE GRN_ORDINAL_NUM = @INDEX
			FETCH NEXT FROM CUR INTO @INDEX, @PRICE_COM, @COM_QUANT
		END
	
		CLOSE CUR
		DEALLOCATE CUR
	END
END

GO
----- GOOD_RECEIVED_NOTES: TOTAL_PAYMENT_GRN = SUM(DETAILS)

CREATE OR ALTER TRIGGER TG_CALCULAT_TOTAL_PAYMENT_GRN_INSERT
ON GRN_DETAILS AFTER INSERT
AS
BEGIN
	DECLARE @COM_QUANT INT, @PRICE_COM MONEY, @LOT CHAR(10)
	DECLARE CUR CURSOR FOR
		SELECT LOTNUMBER, COM_PRICE, COM_QUANTITY FROM INSERTED

	OPEN CUR
	FETCH NEXT FROM CUR INTO @LOT, @PRICE_COM, @COM_QUANT

	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE GOOD_RECEIVED_NOTES SET TOTAL_PAYMENT_GRN = TOTAL_PAYMENT_GRN + @PRICE_COM*@COM_QUANT
			WHERE LOTNUMBER=@LOT
		FETCH NEXT FROM CUR INTO @LOT, @PRICE_COM, @COM_QUANT
	END

	CLOSE CUR
	DEALLOCATE CUR
END

GO

CREATE OR ALTER TRIGGER TG_CALCULAT_TOTAL_PAYMENT_GRN_UPDATE
ON GRN_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(COM_QUANTITY) OR UPDATE(COM_PRICE))
	BEGIN
		--- INSERT NEW INFORMATION
		DECLARE @COM_QUANT INT, @PRICE_COM MONEY, @LOT CHAR(10)
		DECLARE CUR CURSOR FOR
			SELECT LOTNUMBER, COM_PRICE, COM_QUANTITY FROM INSERTED

		OPEN CUR
		FETCH NEXT FROM CUR INTO @LOT, @PRICE_COM, @COM_QUANT

		WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE GOOD_RECEIVED_NOTES SET TOTAL_PAYMENT_GRN = TOTAL_PAYMENT_GRN + @PRICE_COM*@COM_QUANT
				WHERE LOTNUMBER=@LOT
			FETCH NEXT FROM CUR INTO @LOT, @PRICE_COM, @COM_QUANT
		END

		CLOSE CUR
		DEALLOCATE CUR

		--- DELETE OLD INFORMATION

		DECLARE @COM_QUANT_DEL INT, @PRICE_COM_DEL MONEY, @LOT_DEL CHAR(10)
		DECLARE CUR_DEL CURSOR FOR
			SELECT LOTNUMBER, COM_PRICE, COM_QUANTITY FROM DELETED

		OPEN CUR_DEL
		FETCH NEXT FROM CUR_DEL INTO @LOT_DEL, @PRICE_COM_DEL, @COM_QUANT_DEL

		WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE GOOD_RECEIVED_NOTES SET TOTAL_PAYMENT_GRN = TOTAL_PAYMENT_GRN - @PRICE_COM_DEL*@COM_QUANT_DEL
				WHERE LOTNUMBER=@LOT_DEL
			FETCH NEXT FROM CUR_DEL INTO @LOT_DEL, @PRICE_COM_DEL, @COM_QUANT_DEL
		END

		CLOSE CUR_DEL
		DEALLOCATE CUR_DEL

	END

	IF (UPDATE(STATUS_GRN))
	BEGIN
		DECLARE @COM_QUANT_ST INT, @PRICE_COM_ST MONEY, @LOT_ST CHAR(10)
		DECLARE CUR_ST CURSOR FOR
			SELECT LOTNUMBER, COM_PRICE, COM_QUANTITY FROM INSERTED
				WHERE STATUS_GRN = 1

		OPEN CUR_ST
		FETCH NEXT FROM CUR_ST INTO @LOT_ST, @PRICE_COM_ST, @COM_QUANT_ST

		WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE GOOD_RECEIVED_NOTES SET TOTAL_PAYMENT_GRN = TOTAL_PAYMENT_GRN - @PRICE_COM_ST*@COM_QUANT_ST
				WHERE LOTNUMBER=@LOT_ST
			FETCH NEXT FROM CUR_ST INTO @LOT_ST, @PRICE_COM_ST, @COM_QUANT_ST
		END

		CLOSE CUR_ST
		DEALLOCATE CUR_ST
	END
END

GO

----- REPAIR_PAYMENT_DETAILS: 
------TOTAL_PRICE = COM_QUANTITY * (COM_PRICE + WAGE)(CURRENT PRICE IN CAR_COMPONENTS TABLE)

----- UPDATE

CREATE OR ALTER TRIGGER TG_REPAIR_PAYMENT_DETAILS_CALCUTE_TOTAL_PRICE_INSERT
ON REPAIR_PAYMENT_DETAILS AFTER INSERT
AS
BEGIN
	DECLARE @INDEX INT, @ID_COM CHAR(10), @COM_QUANTITY INT,
		@IDBILL CHAR(10)
	DECLARE CUR_INS_RPBD CURSOR FOR
		SELECT RPD_ORDINAL_NUM, ID_BILL, ID_COM, COM_QUANTITY FROM INSERTED
	
	OPEN CUR_INS_RPBD 
	FETCH NEXT FROM CUR_INS_RPBD INTO @INDEX, @IDBILL, @ID_COM, @COM_QUANTITY

	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @ID_GARA CHAR(10)
		SELECT @ID_GARA=ID_GARA FROM REPAIR_PAYMENT_BILL AS BILL 
			JOIN RECEPTION_FORMS AS REC ON REC.ID_REC=BILL.ID_REC 
			WHERE ID_BILL=@IDBILL

		DECLARE @COUNT_ROW INT
		SELECT @COUNT_ROW=COUNT(*) FROM REPAIR_PAYMENT_DETAILS 
		WHERE ID_BILL=@IDBILL AND ID_COM=@ID_COM

		DECLARE @CUR_PRICE MONEY, @WAGE MONEY
		SELECT @CUR_PRICE=CUR_PRICE, @WAGE=WAGE FROM COMPONENT_DETAILS
			WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA

		IF (@COUNT_ROW = 1)
		BEGIN
			UPDATE REPAIR_PAYMENT_DETAILS SET TOTAL_PRICE = (@CUR_PRICE+@WAGE) * @COM_QUANTITY
				WHERE RPD_ORDINAL_NUM=@INDEX
		END
		ELSE 
		BEGIN
			UPDATE REPAIR_PAYMENT_DETAILS 
				SET TOTAL_PRICE = TOTAL_PRICE + (@CUR_PRICE + @WAGE) * @COM_QUANTITY,
				COM_QUANTITY = COM_QUANTITY + @COM_QUANTITY
				WHERE ID_BILL=@IDBILL AND ID_COM=@ID_COM
			DELETE FROM REPAIR_PAYMENT_DETAILS WHERE RPD_ORDINAL_NUM = @INDEX
		END

		FETCH NEXT FROM CUR_INS_RPBD INTO @INDEX, @IDBILL, @ID_COM, @COM_QUANTITY
	END
	CLOSE CUR_INS_RPBD
	DEALLOCATE CUR_INS_RPBD
END

GO
CREATE OR ALTER TRIGGER TG_REPAIR_PAYMENT_DETAILS_CALCUTE_TOTAL_PRICE_UPDATE
ON REPAIR_PAYMENT_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(COM_QUANTITY))
	BEGIN
		DECLARE @INDEX INT, @ID_COM CHAR(10), @COM_QUANTITY INT,
			@IDBILL CHAR(10)
		DECLARE CUR CURSOR FOR
			SELECT RPD_ORDINAL_NUM, ID_BILL, ID_COM, COM_QUANTITY FROM INSERTED
	
		OPEN CUR 
		FETCH NEXT FROM CUR INTO @INDEX, @IDBILL, @ID_COM, @COM_QUANTITY
	
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @ID_GARA CHAR(10)
			SELECT @ID_GARA=ID_GARA FROM REPAIR_PAYMENT_BILL AS BILL 
				JOIN RECEPTION_FORMS AS REC ON REC.ID_REC=BILL.ID_REC 
				WHERE ID_BILL=@IDBILL

			DECLARE @CUR_PRICE MONEY, @WAGE MONEY
			SELECT @CUR_PRICE=CUR_PRICE, @WAGE=WAGE FROM COMPONENT_DETAILS
				WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
			UPDATE REPAIR_PAYMENT_DETAILS SET TOTAL_PRICE = (@CUR_PRICE+@WAGE) * @COM_QUANTITY
				WHERE RPD_ORDINAL_NUM=@INDEX
			FETCH NEXT FROM CUR INTO @INDEX, @IDBILL, @ID_COM, @COM_QUANTITY
		END
		CLOSE CUR
		DEALLOCATE CUR
	END
END

GO
------ REPAIR_PAYMENT_BILL: TOTAL_PAYMENT = SUM(DETAILS)

CREATE OR ALTER TRIGGER TG_CALCULATE_TOTAL_PAYMENT_REPAIR_PAYMENT_BILL_INSERT
ON REPAIR_PAYMENT_DETAILS AFTER INSERT
AS
BEGIN
	DECLARE @INDEX INT, @ID_COM CHAR(10), @COM_QUANTITY INT,
		@IDBILL CHAR(10)
	DECLARE CUR CURSOR FOR
		SELECT ID_BILL, ID_COM, COM_QUANTITY FROM INSERTED
	
	OPEN CUR 
	FETCH NEXT FROM CUR INTO @IDBILL, @ID_COM, @COM_QUANTITY
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @ID_GARA CHAR(10)
		SELECT @ID_GARA=ID_GARA FROM REPAIR_PAYMENT_BILL AS BILL 
			JOIN RECEPTION_FORMS AS REC ON REC.ID_REC=BILL.ID_REC 
			WHERE ID_BILL=@IDBILL AND STATUS_BILL = 0 AND STATUS_REC=0

		DECLARE @CUR_PRICE MONEY, @WAGE MONEY
		SELECT @CUR_PRICE=CUR_PRICE, @WAGE=WAGE FROM COMPONENT_DETAILS
			WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA 
		UPDATE REPAIR_PAYMENT_BILL SET TOTAL_PAYMENT = TOTAL_PAYMENT + @COM_QUANTITY * (@CUR_PRICE + @WAGE)
			WHERE ID_BILL=@IDBILL AND STATUS_BILL=0
		FETCH NEXT FROM CUR INTO @IDBILL, @ID_COM, @COM_QUANTITY
	END
	CLOSE CUR
	DEALLOCATE CUR
END

GO

CREATE OR ALTER TRIGGER TG_CALCULATE_TOTAL_PAYMENT_REPAIR_PAYMENT_BILL_UPDATE
ON REPAIR_PAYMENT_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(COM_QUANTITY))
	BEGIN

		----- INSERT NEW INFORMATION

		DECLARE @INDEX INT, @ID_COM CHAR(10), @COM_QUANTITY INT,
			@IDBILL CHAR(10)
		DECLARE CUR CURSOR FOR
			SELECT ID_BILL, ID_COM, COM_QUANTITY FROM INSERTED
	
		OPEN CUR 
		FETCH NEXT FROM CUR INTO @IDBILL, @ID_COM, @COM_QUANTITY
	
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @ID_GARA CHAR(10)
			SELECT @ID_GARA=ID_GARA FROM REPAIR_PAYMENT_BILL AS BILL 
				JOIN RECEPTION_FORMS AS REC ON REC.ID_REC=BILL.ID_REC 
				WHERE ID_BILL=@IDBILL AND STATUS_BILL = 0 AND STATUS_REC=0

			DECLARE @CUR_PRICE MONEY, @WAGE MONEY
			SELECT @CUR_PRICE=CUR_PRICE, @WAGE=WAGE FROM COMPONENT_DETAILS
				WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA 
			UPDATE REPAIR_PAYMENT_BILL SET TOTAL_PAYMENT = TOTAL_PAYMENT + @COM_QUANTITY * (@CUR_PRICE + @WAGE)
				WHERE ID_BILL=@IDBILL AND STATUS_BILL=0
			FETCH NEXT FROM CUR INTO @IDBILL, @ID_COM, @COM_QUANTITY
		END
		CLOSE CUR
		DEALLOCATE CUR
		
		---- DELETE OLD INFORMATION

		DECLARE @ID_COM_OLD CHAR(10), @COM_QUANTITY_OLD INT,
			@IDBILL_OLD CHAR(10)
		DECLARE CUR_OLD CURSOR FOR
			SELECT ID_BILL, ID_COM, COM_QUANTITY FROM DELETED
	
		OPEN CUR_OLD
		FETCH NEXT FROM CUR_OLD INTO @IDBILL_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD
	
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10)
			SELECT @ID_GARA_OLD=ID_GARA FROM REPAIR_PAYMENT_BILL AS BILL 
				JOIN RECEPTION_FORMS AS REC ON REC.ID_REC=BILL.ID_REC 
				WHERE ID_BILL=@IDBILL_OLD AND STATUS_BILL=0 
				AND STATUS_REC=0

			DECLARE @CUR_PRICE_OLD MONEY, @WAGE_OLD MONEY
			SELECT @CUR_PRICE_OLD=CUR_PRICE, @WAGE_OLD=WAGE FROM COMPONENT_DETAILS
				WHERE ID_COM=@ID_COM_OLD AND ID_GARA=@ID_GARA_OLD
			UPDATE REPAIR_PAYMENT_BILL SET TOTAL_PAYMENT = TOTAL_PAYMENT 
				- @COM_QUANTITY_OLD * (@CUR_PRICE_OLD + @WAGE_OLD)
				WHERE ID_BILL=@IDBILL_OLD AND STATUS_BILL=0
			FETCH NEXT FROM CUR_OLD INTO @IDBILL_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD
		END
		CLOSE CUR_OLD
		DEALLOCATE CUR_OLD
	END
END

GO

CREATE OR ALTER TRIGGER TG_CALCULATE_TOTAL_PAYMENT_REPAIR_PAYMENT_BILL_DELETE
ON REPAIR_PAYMENT_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(STATUS_RPD))
	BEGIN	
		DECLARE @ID_COM_OLD CHAR(10), @COM_QUANTITY_OLD INT,
			@IDBILL_OLD CHAR(10)
		DECLARE CUR_OLD CURSOR FOR
			SELECT ID_BILL, ID_COM, COM_QUANTITY FROM INSERTED
				WHERE STATUS_RPD=1
	
		OPEN CUR_OLD
		FETCH NEXT FROM CUR_OLD INTO @IDBILL_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD
	
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10)
			SELECT @ID_GARA_OLD=ID_GARA FROM REPAIR_PAYMENT_BILL AS BILL 
				JOIN RECEPTION_FORMS AS REC ON REC.ID_REC=BILL.ID_REC 
				WHERE ID_BILL=@IDBILL_OLD AND STATUS_BILL=0 
				AND STATUS_REC=0

			DECLARE @CUR_PRICE_OLD MONEY, @WAGE_OLD MONEY
			SELECT @CUR_PRICE_OLD=CUR_PRICE, @WAGE_OLD=WAGE FROM COMPONENT_DETAILS
				WHERE ID_COM=@ID_COM_OLD AND ID_GARA=@ID_GARA_OLD
			UPDATE REPAIR_PAYMENT_BILL SET TOTAL_PAYMENT = TOTAL_PAYMENT 
				- @COM_QUANTITY_OLD * (@CUR_PRICE_OLD + @WAGE_OLD)
				WHERE ID_BILL=@IDBILL_OLD AND STATUS_BILL=0
			FETCH NEXT FROM CUR_OLD INTO @IDBILL_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD
		END
		CLOSE CUR_OLD
		DEALLOCATE CUR_OLD
	END
END

GO

----- INCURRED_COSTS: INCURRED_COSTS_TTPRICE = COMQUANTITY * CUR_PRICE

CREATE OR ALTER TRIGGER TG_INCURRED_COSTS_INCURRED_COSTS_TTPRICE_INSERT
ON INCURRED_COSTS AFTER INSERT
AS
BEGIN
	DECLARE @ID_COM CHAR(10), @COM_QUANTITY MONEY, @PK INT, @ID_GARA CHAR(10)
	DECLARE CUR_INCUR_INS CURSOR FOR
		SELECT CO_ORDINAL_NUM, ID_GARA, ID_COM, COM_QUANTITY
		FROM INSERTED WHERE STATUS_IC=0

	OPEN CUR_INCUR_INS
	FETCH NEXT FROM CUR_INCUR_INS INTO @PK, @ID_GARA, @ID_COM, @COM_QUANTITY

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		DECLARE @CUR_PRICE MONEY
		SELECT @CUR_PRICE=CUR_PRICE FROM COMPONENT_DETAILS 
			WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
		UPDATE INCURRED_COSTS SET INCURRED_COSTS_TTPRICE = @COM_QUANTITY * @CUR_PRICE
			WHERE CO_ORDINAL_NUM=@PK
	FETCH NEXT FROM CUR_INCUR_INS INTO @PK, @ID_GARA, @ID_COM, @COM_QUANTITY
	END

	CLOSE CUR_INCUR_INS
	DEALLOCATE CUR_INCUR_INS
END

GO

CREATE OR ALTER TRIGGER TG_INCURRED_COSTS_INCURRED_COSTS_TTPRICE_UPDATE
ON INCURRED_COSTS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(COM_QUANTITY) OR UPDATE(ID_COM)
	OR UPDATE(ID_GARA) OR UPDATE(INCURRED_COSTS_DATE))
	BEGIN
		DECLARE @ID_COM CHAR(10), @COM_QUANTITY MONEY, @PK INT, @ID_GARA CHAR(10)
		DECLARE CUR_INCUR_INS CURSOR FOR
			SELECT CO_ORDINAL_NUM, ID_GARA, ID_COM, COM_QUANTITY
			FROM INSERTED WHERE STATUS_IC=0

		OPEN CUR_INCUR_INS
		FETCH NEXT FROM CUR_INCUR_INS INTO @PK, @ID_GARA, @ID_COM, @COM_QUANTITY

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @CUR_PRICE MONEY
			SELECT @CUR_PRICE=CUR_PRICE FROM COMPONENT_DETAILS 
				WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
			UPDATE INCURRED_COSTS SET INCURRED_COSTS_TTPRICE = @COM_QUANTITY * @CUR_PRICE
				WHERE CO_ORDINAL_NUM=@PK
		FETCH NEXT FROM CUR_INCUR_INS INTO @PK, @ID_GARA, @ID_COM, @COM_QUANTITY
		END

		CLOSE CUR_INCUR_INS
		DEALLOCATE CUR_INCUR_INS
	END
END

GO

----- DELETE ROW <=> UPDATE(STATUS)

CREATE OR ALTER TRIGGER TG_INCURRED_COSTS_INCURRED_COSTS_TTPRICE_UPDATE_STATUS
ON INCURRED_COSTS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(STATUS_IC))
	BEGIN
		DECLARE @ID_COM CHAR(10), @COM_QUANTITY MONEY, @PK INT, @ID_GARA CHAR(10)
		DECLARE CUR_INCUR_INS CURSOR FOR
			SELECT CO_ORDINAL_NUM FROM INSERTED WHERE STATUS_IC=1

		OPEN CUR_INCUR_INS
		FETCH NEXT FROM CUR_INCUR_INS INTO @PK

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			UPDATE INCURRED_COSTS SET INCURRED_COSTS_TTPRICE = 0
				WHERE CO_ORDINAL_NUM=@PK
		FETCH NEXT FROM CUR_INCUR_INS INTO @PK
		END

		CLOSE CUR_INCUR_INS
		DEALLOCATE CUR_INCUR_INS
	END
END

GO
--- REVENUE: EFFECTED BY REPAIR_PAYMENT_BILL

CREATE FUNCTION dbo.GET_MAX_IDREPORT_REVENUE()
RETURNS INT
AS
BEGIN
	DECLARE @MAX_ID_REPORT CHAR(10), @MAX_NUM INT

	IF ((SELECT COUNT(*) FROM REVENUE) = 0)
		RETURN 0

	SELECT TOP 1 @MAX_ID_REPORT = ID_REVENUE_REPORT
		FROM REVENUE
		ORDER BY ID_REVENUE_REPORT DESC;
	
	DECLARE @SUB_MAX CHAR(10) = SUBSTRING(@MAX_ID_REPORT, 4, LEN(@MAX_ID_REPORT))
	SET @MAX_NUM = CAST(@SUB_MAX AS INT)

	RETURN @MAX_NUM
END

GO

CREATE OR ALTER TRIGGER TG_TOTAL_REVENUE_INSERT
ON REPAIR_PAYMENT_BILL AFTER INSERT
AS
BEGIN
	DECLARE @COMPLE_DATE SMALLDATETIME, @REC_FORM CHAR(10)
	DECLARE CUR_INS CURSOR FOR
		SELECT COMPLETION_DATE, ID_REC FROM INSERTED WHERE STATUS_BILL=0
	OPEN CUR_INS
	FETCH NEXT FROM CUR_INS INTO @COMPLE_DATE, @REC_FORM
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @COUNT_ROW INT, @ID_GARA CHAR(10)
		SELECT @ID_GARA=ID_GARA FROM RECEPTION_FORMS WHERE ID_REC=@REC_FORM
		SELECT @COUNT_ROW=COUNT(*) FROM REVENUE 
			WHERE MONTH(RENDERING_TIME) = MONTH(@COMPLE_DATE)
			AND YEAR(RENDERING_TIME) = YEAR(@COMPLE_DATE)
			AND ID_GARA=@ID_GARA 
		IF (@COUNT_ROW = 0)
		BEGIN
			----- REVENUE TABLE
			DECLARE @MAX_ID_NUM INT
			SELECT @MAX_ID_NUM = dbo.GET_MAX_IDREPORT_REVENUE()
			SET @MAX_ID_NUM = @MAX_ID_NUM + 1
			DECLARE @ID CHAR(10)
			SET @ID = CAST(@MAX_ID_NUM AS CHAR(10))
			INSERT INTO REVENUE (ID_REVENUE_REPORT, ID_GARA, RENDERING_TIME)
				VALUES ('REV'+@ID, @ID_GARA, @COMPLE_DATE)
		END
		FETCH NEXT FROM CUR_INS INTO @COMPLE_DATE, @REC_FORM
	END

	CLOSE CUR_INS
	DEALLOCATE CUR_INS
END

GO

CREATE OR ALTER TRIGGER TG_TOTAL_REVENUE_UPDATE_ID_REC_DATE
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF (UPDATE(ID_REC) OR UPDATE(COMPLETION_DATE))
	BEGIN
		--- INSERT NEW INFORMATION
		DECLARE @TIME SMALLDATETIME, @TOTAL_PAY MONEY, @ID_REC CHAR(10)
		DECLARE CUR_INSE CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM INSERTED
			WHERE STATUS_BILL=0

		OPEN CUR_INSE
		FETCH NEXT FROM CUR_INSE INTO @ID_REC, @TIME, @TOTAL_PAY

		WHILE @@FETCH_STATUS=0
		BEGIN
			DECLARE @ID_GARA CHAR(10)
			SELECT @ID_GARA=ID_GARA FROM RECEPTION_FORMS 
				WHERE STATUS_REC=0 AND ID_REC=@ID_REC
			DECLARE @COUNT_ROW_EXIST INT
			SELECT @COUNT_ROW_EXIST=COUNT(*) FROM REVENUE WHERE ID_GARA=@ID_GARA 
				AND MONTH(@TIME)=MONTH(RENDERING_TIME)
				AND YEAR(@TIME)=YEAR(RENDERING_TIME)
			IF (@COUNT_ROW_EXIST = 0)
			BEGIN
				DECLARE @MAX_ID_NUM INT
				SELECT @MAX_ID_NUM = dbo.GET_MAX_IDREPORT_REVENUE()
				SET @MAX_ID_NUM = @MAX_ID_NUM + 1
				DECLARE @ID CHAR(10)
				SET @ID = CAST(@MAX_ID_NUM AS CHAR(10))
				INSERT INTO REVENUE (ID_REVENUE_REPORT, ID_GARA, RENDERING_TIME, TOTAL_REVENUE)
					VALUES ('REV'+@ID, @ID_GARA, @TIME, @TOTAL_PAY)
			END
			ELSE
			BEGIN
				UPDATE REVENUE SET TOTAL_REVENUE=TOTAL_REVENUE + @TOTAL_PAY
					WHERE ID_GARA=@ID_GARA AND MONTH(@TIME)=MONTH(RENDERING_TIME)
					AND YEAR(@TIME)=YEAR(RENDERING_TIME)
			END
			FETCH NEXT FROM CUR_INSE INTO @ID_REC, @TIME, @TOTAL_PAY
		END
		CLOSE CUR_INSE
		DEALLOCATE CUR_INSE

		--- DELETE OLD INFORMATION
		DECLARE @TIME_OLD SMALLDATETIME, @TOTAL_PAY_OLD MONEY, @ID_REC_OLD CHAR(10)
		DECLARE CUR_OLD CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM DELETED

		OPEN CUR_OLD
		FETCH NEXT FROM CUR_OLD INTO @ID_REC_OLD, @TIME_OLD, @TOTAL_PAY_OLD

		WHILE @@FETCH_STATUS=0
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10)
			SELECT @ID_GARA_OLD=ID_GARA FROM RECEPTION_FORMS 
				WHERE STATUS_REC=0 AND ID_REC=@ID_REC_OLD
			UPDATE REVENUE SET TOTAL_REVENUE=TOTAL_REVENUE - @TOTAL_PAY_OLD
				WHERE ID_GARA=@ID_GARA_OLD AND MONTH(@TIME_OLD)=MONTH(RENDERING_TIME)
				AND YEAR(@TIME_OLD)=YEAR(RENDERING_TIME)
			FETCH NEXT FROM CUR_OLD INTO @ID_REC_OLD, @TIME_OLD, @TOTAL_PAY_OLD
		END
		CLOSE CUR_OLD
		DEALLOCATE CUR_OLD
	END
END

GO

CREATE OR ALTER TRIGGER TG_TOTAL_REVENUE_UPDATE_QUANTITY
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF (UPDATE(TOTAL_PAYMENT))
	BEGIN

		---- INSERT NEW VALUES

		DECLARE @ID_REC CHAR(10), @COMPLE_TIME SMALLDATETIME, @TOTAL_PAYMENT MONEY
		DECLARE CUR_RPBU_QUANTITY CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM INSERTED
			WHERE STATUS_BILL=0

		OPEN CUR_RPBU_QUANTITY
		FETCH NEXT FROM CUR_RPBU_QUANTITY INTO @ID_REC, @COMPLE_TIME, @TOTAL_PAYMENT

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA CHAR(10)
			SELECT @ID_GARA=ID_GARA FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC
				AND STATUS_REC=0
			UPDATE REVENUE SET TOTAL_REVENUE=TOTAL_REVENUE + @TOTAL_PAYMENT
				WHERE ID_GARA=@ID_GARA AND MONTH( @COMPLE_TIME)=MONTH(RENDERING_TIME)
				AND YEAR( @COMPLE_TIME)=YEAR(RENDERING_TIME)
			FETCH NEXT FROM CUR_RPBU_QUANTITY INTO @ID_REC, @COMPLE_TIME, @TOTAL_PAYMENT
		END

		CLOSE CUR_RPBU_QUANTITY
		DEALLOCATE CUR_RPBU_QUANTITY

		----- DELETE OLD VALUES

		DECLARE @ID_REC_OLD CHAR(10), @COMPLE_TIME_OLD SMALLDATETIME, @TOTAL_PAYMENT_OLD MONEY
		DECLARE CUR_RPBU_QUANTITY_OLD CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM DELETED
			WHERE STATUS_BILL=0

		OPEN CUR_RPBU_QUANTITY_OLD
		FETCH NEXT FROM CUR_RPBU_QUANTITY_OLD INTO @ID_REC_OLD, @COMPLE_TIME_OLD, @TOTAL_PAYMENT_OLD

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10)
			SELECT @ID_GARA_OLD=ID_GARA FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC_OLD
				AND STATUS_REC=0
			UPDATE REVENUE SET TOTAL_REVENUE=TOTAL_REVENUE - @TOTAL_PAYMENT_OLD
				WHERE ID_GARA=@ID_GARA_OLD AND MONTH( @COMPLE_TIME_OLD)=MONTH(RENDERING_TIME)
				AND YEAR( @COMPLE_TIME_OLD)=YEAR(RENDERING_TIME) 
			FETCH NEXT FROM CUR_RPBU_QUANTITY_OLD INTO @ID_REC_OLD, @COMPLE_TIME_OLD, @TOTAL_PAYMENT_OLD
		END

		CLOSE CUR_RPBU_QUANTITY_OLD
		DEALLOCATE CUR_RPBU_QUANTITY_OLD

	END
END

GO

CREATE OR ALTER TRIGGER TG_TOTAL_REVENUE_DELETE
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF (UPDATE(STATUS_BILL))
	BEGIN
		DECLARE @TIME_OLD SMALLDATETIME, @TOTAL_PAY_OLD MONEY, @ID_REC_OLD CHAR(10),
			@IDBILL CHAR(10)
		DECLARE CUR_DEL_ROW CURSOR FOR
			SELECT ID_BILL, ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM INSERTED

		OPEN CUR_DEL_ROW
		FETCH NEXT FROM CUR_DEL_ROW INTO @IDBILL, @ID_REC_OLD, @TIME_OLD, @TOTAL_PAY_OLD

		WHILE @@FETCH_STATUS=0
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10)
			SELECT @ID_GARA_OLD=ID_GARA FROM RECEPTION_FORMS 
				WHERE STATUS_REC=0 AND ID_REC=@ID_REC_OLD
			UPDATE REVENUE SET TOTAL_REVENUE=TOTAL_REVENUE - @TOTAL_PAY_OLD
				WHERE ID_GARA=@ID_GARA_OLD AND MONTH(@TIME_OLD)=MONTH(RENDERING_TIME)
				AND YEAR(@TIME_OLD)=YEAR(RENDERING_TIME)
			UPDATE REPAIR_PAYMENT_DETAILS SET STATUS_RPD=1 WHERE ID_BILL=@IDBILL
			FETCH NEXT FROM CUR_DEL_ROW INTO  @IDBILL, @ID_REC_OLD, @TIME_OLD, @TOTAL_PAY_OLD
		END
		CLOSE CUR_DEL_ROW
		DEALLOCATE CUR_DEL_ROW
	END
END

GO

----- REVENUE DETAILS: EFFECTED BY REPAIR_PAYMENT_BILL

CREATE OR ALTER TRIGGER TG_CALCULATE_RATE_OF_EACHBRAND
ON REPAIR_PAYMENT_BILL AFTER INSERT
AS
BEGIN
	DECLARE @ID_REC CHAR(10), @COMPLETE_TIME SMALLDATETIME, 
		@TOTAL_MONEY MONEY 
	DECLARE CUR_INS CURSOR FOR
		SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM INSERTED
	OPEN CUR_INS
	FETCH NEXT FROM CUR_INS INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY

	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @ID_GARA CHAR(10), @ID_BRAND CHAR(10)
		SELECT @ID_BRAND=ID_BRAND, @ID_GARA=ID_GARA
			FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC
			AND STATUS_REC=0
		DECLARE @COUNT_ROW INT
		SELECT @COUNT_ROW=COUNT(*) FROM REVENUE_DETAILS 
			WHERE ID_BRAND=@ID_BRAND AND ID_GARA=@ID_GARA 
			AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
			AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
			AND STATUS_RD=0
		DECLARE @SUM_REPAIR FLOAT
		IF (@COUNT_ROW = 0)
		BEGIN
			DECLARE @RATE_REPAIR FLOAT
			SET @SUM_REPAIR = 0
			SELECT @SUM_REPAIR=SUM(NUMBER_OF_REPAIRS) FROM REVENUE_DETAILS 
				WHERE ID_GARA=@ID_GARA
				AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
				AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
				AND STATUS_RD=0
			IF (@SUM_REPAIR IS NULL)
				SET @RATE_REPAIR=1
			ELSE
				SET @RATE_REPAIR=1/(@SUM_REPAIR + 1)
			INSERT INTO REVENUE_DETAILS(ID_GARA, ID_BRAND, 
				RENDER_TIME, NUMBER_OF_REPAIRS, RATE,TOTAL_MONEY, STATUS_RD)
				VALUES (@ID_GARA, @ID_BRAND, @COMPLETE_TIME, 
				1, @RATE_REPAIR,@TOTAL_MONEY, 0)
		END
		ELSE
		BEGIN
			DECLARE @RATE FLOAT, @SUM FLOAT
			SELECT @SUM=SUM(NUMBER_OF_REPAIRS) FROM REVENUE_DETAILS 
				WHERE ID_GARA=@ID_GARA
				AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
				AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
				AND STATUS_RD=0
			DECLARE @NUMBER INT 
			SELECT @NUMBER=NUMBER_OF_REPAIRS 
				FROM REVENUE_DETAILS WHERE ID_BRAND=@ID_BRAND 
				AND ID_GARA=@ID_GARA 
				AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
				AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
				AND STATUS_RD=0
			SET @RATE=(@NUMBER + 1)/(@SUM + 1)
			UPDATE REVENUE_DETAILS SET RATE=@RATE, NUMBER_OF_REPAIRS = NUMBER_OF_REPAIRS + 1,
				TOTAL_MONEY = @TOTAL_MONEY + TOTAL_MONEY
				WHERE ID_GARA=@ID_GARA AND ID_BRAND=@ID_BRAND
				AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
				AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME) AND STATUS_RD=0

			DECLARE @BRAND_UPDATE_RATE CHAR(10), @NUMBER_UPDATE_RATE INT, 
				@RENDER_TIME SMALLDATETIME
			DECLARE CUR_UPDATE_RATE_INS CURSOR FOR
				SELECT ID_BRAND, NUMBER_OF_REPAIRS, RENDER_TIME 
					FROM REVENUE_DETAILS WHERE ID_GARA=@ID_GARA
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
					AND STATUS_RD=0 AND ID_BRAND <> @ID_BRAND
			OPEN CUR_UPDATE_RATE_INS
			FETCH NEXT FROM CUR_UPDATE_RATE_INS INTO @BRAND_UPDATE_RATE,
				@NUMBER_UPDATE_RATE, @RENDER_TIME
			PRINT(@NUMBER_UPDATE_RATE)
			PRINT(@SUM)

			WHILE (@@FETCH_STATUS = 0)
			BEGIN 
				UPDATE REVENUE_DETAILS SET RATE=@NUMBER_UPDATE_RATE/(@SUM + 1)
					WHERE ID_BRAND=@BRAND_UPDATE_RATE 
					AND MONTH(@RENDER_TIME) = MONTH( RENDER_TIME)
					AND YEAR(@RENDER_TIME) = YEAR(RENDER_TIME)
					AND ID_BRAND <> @ID_BRAND AND STATUS_RD=0 
					AND ID_GARA=@ID_GARA
				FETCH NEXT FROM CUR_UPDATE_RATE_INS INTO @BRAND_UPDATE_RATE,
				@NUMBER_UPDATE_RATE, @RENDER_TIME
			END
			CLOSE CUR_UPDATE_RATE_INS
			DEALLOCATE CUR_UPDATE_RATE_INS
		END
		FETCH NEXT FROM CUR_INS INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY
	END
	CLOSE CUR_INS
	DEALLOCATE CUR_INS
END

GO

--- INSERT DATA AGAIND AND CHECK IT

CREATE OR ALTER TRIGGER TG_CALCULATE_RATE_OF_EACHBRAND_DELETE
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF (UPDATE(STATUS_BILL))
	BEGIN
		DECLARE @ID_REC CHAR(10), @COMPLETE_TIME SMALLDATETIME, 
			@TOTAL_MONEY MONEY 
		DECLARE CUR_DEL CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM DELETED
		OPEN CUR_DEL
		FETCH NEXT FROM CUR_DEL INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY

		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @ID_BRAND CHAR(10), @ID_GARA CHAR(10)
			SELECT @ID_BRAND=ID_BRAND, @ID_GARA=ID_GARA 
				FROM RECEPTION_FORMS 
				WHERE ID_REC=@ID_REC AND STATUS_REC=0
			DECLARE @COUNT_BILL_ROW INT
			SELECT @COUNT_BILL_ROW = COUNT(*) FROM REPAIR_PAYMENT_BILL 
				AS BILL JOIN RECEPTION_FORMS AS REC
				ON BILL.ID_REC=REC.ID_REC WHERE REC.ID_GARA=@ID_GARA
				AND REC.ID_BRAND=@ID_BRAND AND BILL.STATUS_BILL=0
				AND MONTH(@COMPLETE_TIME)=MONTH(COMPLETION_DATE)
				AND YEAR(@COMPLETE_TIME)=YEAR(COMPLETION_DATE)
			IF (@COUNT_BILL_ROW = 0) 
			BEGIN
				UPDATE REVENUE_DETAILS SET STATUS_RD=1, TOTAL_MONEY=0
					WHERE ID_BRAND=@ID_BRAND AND ID_GARA=@ID_GARA
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
			END
			ELSE 
			BEGIN
				DECLARE @RATE FLOAT, @SUM FLOAT
				SELECT @SUM=SUM(NUMBER_OF_REPAIRS) FROM REVENUE_DETAILS 
					WHERE ID_GARA=@ID_GARA
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
				DECLARE @NUMBER INT 
				SELECT @NUMBER=NUMBER_OF_REPAIRS 
					FROM REVENUE_DETAILS WHERE ID_BRAND=@ID_BRAND 
					AND ID_GARA=@ID_GARA 
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
				SET @RATE=(@NUMBER - 1)/(@SUM - 1)
				UPDATE REVENUE_DETAILS SET RATE=@RATE, NUMBER_OF_REPAIRS = NUMBER_OF_REPAIRS - 1,
					TOTAL_MONEY=TOTAL_MONEY - @TOTAL_MONEY
					WHERE ID_GARA=@ID_GARA AND ID_BRAND=@ID_BRAND
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME) AND STATUS_RD=0

				DECLARE @BRAND_UPDATE_RATE CHAR(10), @NUMBER_UPDATE_RATE INT, 
					@RENDER_TIME SMALLDATETIME
				DECLARE CUR_UPDATE_RATE_INS CURSOR FOR
					SELECT ID_BRAND, NUMBER_OF_REPAIRS, RENDER_TIME 
						FROM REVENUE_DETAILS WHERE ID_GARA=@ID_GARA
						AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
						AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
						AND STATUS_RD=0 AND ID_BRAND <> @ID_BRAND
				OPEN CUR_UPDATE_RATE_INS
				FETCH NEXT FROM CUR_UPDATE_RATE_INS INTO @BRAND_UPDATE_RATE,
					@NUMBER_UPDATE_RATE, @RENDER_TIME
				PRINT(@NUMBER_UPDATE_RATE)
				PRINT(@SUM)

				WHILE (@@FETCH_STATUS = 0)
				BEGIN 
					UPDATE REVENUE_DETAILS SET RATE=@NUMBER_UPDATE_RATE/(@SUM - 1)
						WHERE ID_BRAND=@BRAND_UPDATE_RATE 
						AND MONTH(@RENDER_TIME) = MONTH( RENDER_TIME)
						AND YEAR(@RENDER_TIME) = YEAR(RENDER_TIME)
						AND ID_BRAND <> @ID_BRAND AND STATUS_RD=0 
						AND ID_GARA=@ID_GARA
					FETCH NEXT FROM CUR_UPDATE_RATE_INS INTO @BRAND_UPDATE_RATE,
					@NUMBER_UPDATE_RATE, @RENDER_TIME
				END
				CLOSE CUR_UPDATE_RATE_INS
				DEALLOCATE CUR_UPDATE_RATE_INS

			END
			FETCH NEXT FROM CUR_DEL INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY
		END
		CLOSE CUR_DEL
		DEALLOCATE CUR_DEL
	END
END

GO

CREATE OR ALTER TRIGGER TG_CALCULATE_RATE_OF_EACHBRAND_UPDATE_TOTAL_PAYMENT
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF (UPDATE(TOTAL_PAYMENT))
	BEGIN
		---- INSERT NEW INFORMATION
		DECLARE @ID_REC CHAR(10), @COMPLETE_TIME SMALLDATETIME, 
			@TOTAL_MONEY MONEY 
		DECLARE CUR_NEW CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM INSERTED
		OPEN CUR_NEW
		FETCH NEXT FROM CUR_NEW INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY

		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @ID_GARA CHAR(10), @ID_BRAND CHAR(10)
			SELECT @ID_GARA=ID_GARA, @ID_BRAND=ID_BRAND FROM RECEPTION_FORMS
				WHERE ID_REC=@ID_REC AND STATUS_REC=0
			UPDATE REVENUE_DETAILS SET TOTAL_MONEY=TOTAL_MONEY+@TOTAL_MONEY
				WHERE ID_GARA=@ID_GARA AND ID_BRAND=@ID_BRAND AND 
				MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
				AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME) AND STATUS_RD=0
			FETCH NEXT FROM CUR_NEW INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY
		END
		CLOSE CUR_NEW
		DEALLOCATE CUR_NEW

		--DELETE OLD INFORMATION
		DECLARE @ID_REC_OLD CHAR(10), @COMPLETE_TIME_OLD SMALLDATETIME, 
			@TOTAL_MONEY_OLD MONEY 
		DECLARE CUR_DEL_R CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM DELETED
		OPEN CUR_DEL_R
		FETCH NEXT FROM CUR_DEL_R INTO @ID_REC_OLD, @COMPLETE_TIME_OLD, @TOTAL_MONEY_OLD
	
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10), @ID_BRAND_OLD CHAR(10)
			SELECT @ID_GARA_OLD=ID_GARA, @ID_BRAND_OLD=ID_BRAND FROM RECEPTION_FORMS
				WHERE ID_REC=@ID_REC_OLD AND STATUS_REC=0
			UPDATE REVENUE_DETAILS SET TOTAL_MONEY=TOTAL_MONEY-@TOTAL_MONEY_OLD
				WHERE ID_GARA=@ID_GARA_OLD AND ID_BRAND=@ID_BRAND_OLD AND 
				MONTH(@COMPLETE_TIME_OLD)=MONTH(RENDER_TIME)
				AND YEAR(@COMPLETE_TIME_OLD)=YEAR(RENDER_TIME) AND STATUS_RD=0
			FETCH NEXT FROM CUR_DEL_R INTO @ID_REC_OLD, @COMPLETE_TIME_OLD, @TOTAL_MONEY_OLD
		END
		CLOSE CUR_DEL_R
		DEALLOCATE CUR_DEL_R
	END
END

GO

CREATE OR ALTER TRIGGER TG_CALCULATE_RATE_OF_EACHBRAND_UPDATE_ID_REC_OR_COMPLETION_DATE
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF (UPDATE(COMPLETION_DATE) OR UPDATE(ID_REC))
	BEGIN
		--- INSERT NEW VALUES
		DECLARE @ID_REC CHAR(10), @COMPLETE_TIME SMALLDATETIME, 
			@TOTAL_MONEY MONEY 
		DECLARE CUR_INS CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM INSERTED
		OPEN CUR_INS
		FETCH NEXT FROM CUR_INS INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY

		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @ID_GARA CHAR(10), @ID_BRAND CHAR(10)
			SELECT @ID_BRAND=ID_BRAND, @ID_GARA=ID_GARA
				FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC
				AND STATUS_REC=0
			DECLARE @COUNT_ROW INT
			SELECT @COUNT_ROW=COUNT(*) FROM REVENUE_DETAILS 
				WHERE ID_BRAND=@ID_BRAND AND ID_GARA=@ID_GARA 
				AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
				AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
				AND STATUS_RD=0
			IF (@COUNT_ROW = 0)
			BEGIN
				DECLARE @RATE_REPAIR FLOAT, @SUM_REPAIR FLOAT
				SET @SUM_REPAIR = 0
				SELECT @SUM_REPAIR=SUM(NUMBER_OF_REPAIRS) FROM REVENUE_DETAILS 
					WHERE ID_GARA=@ID_GARA
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
				IF (@SUM_REPAIR IS NULL)
					SET @RATE_REPAIR=1
				ELSE
					SET @RATE_REPAIR=1/(@SUM_REPAIR + 1)
				INSERT INTO REVENUE_DETAILS(ID_GARA, ID_BRAND, 
					RENDER_TIME, NUMBER_OF_REPAIRS, RATE,TOTAL_MONEY, STATUS_RD)
					VALUES (@ID_GARA, @ID_BRAND, @COMPLETE_TIME, 
					1, @RATE_REPAIR,@TOTAL_MONEY, 0)
			END
			ELSE
			BEGIN
				DECLARE @RATE FLOAT, @SUM FLOAT
				SELECT @SUM=SUM(NUMBER_OF_REPAIRS) FROM REVENUE_DETAILS 
					WHERE ID_GARA=@ID_GARA
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
				DECLARE @NUMBER INT 
				SELECT @NUMBER=NUMBER_OF_REPAIRS 
					FROM REVENUE_DETAILS WHERE ID_BRAND=@ID_BRAND 
					AND ID_GARA=@ID_GARA 
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
				SET @RATE=(@NUMBER + 1)/(@SUM + 1)
				UPDATE REVENUE_DETAILS SET RATE=@RATE, NUMBER_OF_REPAIRS = NUMBER_OF_REPAIRS + 1,
					TOTAL_MONEY = @TOTAL_MONEY + TOTAL_MONEY
					WHERE ID_GARA=@ID_GARA AND ID_BRAND=@ID_BRAND
					AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME) AND STATUS_RD=0

				DECLARE @BRAND_UPDATE_RATE CHAR(10), @NUMBER_UPDATE_RATE INT, 
					@RENDER_TIME SMALLDATETIME
				DECLARE CUR_UPDATE_RATE_INS CURSOR FOR
					SELECT ID_BRAND, NUMBER_OF_REPAIRS, RENDER_TIME 
						FROM REVENUE_DETAILS WHERE ID_GARA=@ID_GARA
						AND MONTH(@COMPLETE_TIME)=MONTH(RENDER_TIME)
						AND YEAR(@COMPLETE_TIME)=YEAR(RENDER_TIME)
						AND STATUS_RD=0 AND ID_BRAND <> @ID_BRAND
				OPEN CUR_UPDATE_RATE_INS
				FETCH NEXT FROM CUR_UPDATE_RATE_INS INTO @BRAND_UPDATE_RATE,
					@NUMBER_UPDATE_RATE, @RENDER_TIME
				PRINT(@NUMBER_UPDATE_RATE)
				PRINT(@SUM)

				WHILE (@@FETCH_STATUS = 0)
				BEGIN 
					UPDATE REVENUE_DETAILS SET RATE=@NUMBER_UPDATE_RATE/(@SUM + 1)
						WHERE ID_BRAND=@BRAND_UPDATE_RATE 
						AND MONTH(@RENDER_TIME) = MONTH( RENDER_TIME)
						AND YEAR(@RENDER_TIME) = YEAR(RENDER_TIME)
						AND ID_BRAND <> @ID_BRAND AND STATUS_RD=0 
						AND ID_GARA=@ID_GARA
					FETCH NEXT FROM CUR_UPDATE_RATE_INS INTO @BRAND_UPDATE_RATE,
					@NUMBER_UPDATE_RATE, @RENDER_TIME
				END
				CLOSE CUR_UPDATE_RATE_INS
				DEALLOCATE CUR_UPDATE_RATE_INS
			END
			FETCH NEXT FROM CUR_INS INTO @ID_REC, @COMPLETE_TIME, @TOTAL_MONEY
		END
		CLOSE CUR_INS
		DEALLOCATE CUR_INS

		--- DELETE OLD INFORMATION

		DECLARE @ID_REC_DEL CHAR(10), @COMPLETE_TIME_DEL SMALLDATETIME, 
			@TOTAL_MONEY_DEL MONEY 
		DECLARE CUR_DEL CURSOR FOR
			SELECT ID_REC, COMPLETION_DATE, TOTAL_PAYMENT FROM DELETED
		OPEN CUR_DEL
		FETCH NEXT FROM CUR_DEL INTO @ID_REC_DEL, @COMPLETE_TIME_DEL, @TOTAL_MONEY_DEL

		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @ID_BRAND_DEL CHAR(10), @ID_GARA_DEL CHAR(10)
			SELECT @ID_BRAND_DEL=ID_BRAND, @ID_GARA_DEL=ID_GARA 
				FROM RECEPTION_FORMS 
				WHERE ID_REC=@ID_REC_DEL AND STATUS_REC=0
			DECLARE @COUNT_BILL_ROW INT
			SELECT @COUNT_BILL_ROW = COUNT(*) FROM REPAIR_PAYMENT_BILL 
				AS BILL JOIN RECEPTION_FORMS AS REC
				ON BILL.ID_REC=REC.ID_REC WHERE REC.ID_GARA=@ID_GARA_DEL
				AND REC.ID_BRAND=@ID_BRAND_DEL AND BILL.STATUS_BILL=0
				AND MONTH(@COMPLETE_TIME_DEL)=MONTH(COMPLETION_DATE)
				AND YEAR(@COMPLETE_TIME_DEL)=YEAR(COMPLETION_DATE)
			IF (@COUNT_BILL_ROW = 0) 
			BEGIN
				UPDATE REVENUE_DETAILS SET STATUS_RD=1, TOTAL_MONEY=0
					WHERE ID_BRAND=@ID_BRAND_DEL AND ID_GARA=@ID_GARA_DEL
					AND MONTH(@COMPLETE_TIME_DEL)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME_DEL)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
			END
			ELSE 
			BEGIN
				DECLARE @RATE_DEL FLOAT, @SUM_DEL FLOAT
				SELECT @SUM_DEL=SUM(NUMBER_OF_REPAIRS) FROM REVENUE_DETAILS 
					WHERE ID_GARA=@ID_GARA_DEL
					AND MONTH(@COMPLETE_TIME_DEL)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME_DEL)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
				DECLARE @NUMBER_DEL INT 
				SELECT @NUMBER_DEL=NUMBER_OF_REPAIRS 
					FROM REVENUE_DETAILS WHERE ID_BRAND=@ID_BRAND_DEL 
					AND ID_GARA=@ID_GARA_DEL 
					AND MONTH(@COMPLETE_TIME_DEL)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME_DEL)=YEAR(RENDER_TIME)
					AND STATUS_RD=0
				SET @RATE_DEL=(@NUMBER_DEL - 1)/(@SUM_DEL - 1)
				UPDATE REVENUE_DETAILS SET RATE=@RATE_DEL, NUMBER_OF_REPAIRS = NUMBER_OF_REPAIRS - 1,
					TOTAL_MONEY=TOTAL_MONEY - @TOTAL_MONEY_DEL
					WHERE ID_GARA=@ID_GARA_DEL AND ID_BRAND=@ID_BRAND_DEL
					AND MONTH(@COMPLETE_TIME_DEL)=MONTH(RENDER_TIME)
					AND YEAR(@COMPLETE_TIME_DEL)=YEAR(RENDER_TIME) AND STATUS_RD=0

				DECLARE @BRAND_UPDATE_RATE_DEL CHAR(10), @NUMBER_UPDATE_RATE_DEL INT, 
					@RENDER_TIME_DEL SMALLDATETIME
				DECLARE CUR_UPDATE_RATE_INS_DEL CURSOR FOR
					SELECT ID_BRAND, NUMBER_OF_REPAIRS, RENDER_TIME 
						FROM REVENUE_DETAILS WHERE ID_GARA=@ID_GARA_DEL
						AND MONTH(@COMPLETE_TIME_DEL)=MONTH(RENDER_TIME)
						AND YEAR(@COMPLETE_TIME_DEL)=YEAR(RENDER_TIME)
						AND STATUS_RD=0 AND ID_BRAND <> @ID_BRAND_DEL
				OPEN CUR_UPDATE_RATE_INS_DEL
				FETCH NEXT FROM CUR_UPDATE_RATE_INS_DEL INTO @BRAND_UPDATE_RATE_DEL,
					@NUMBER_UPDATE_RATE_DEL, @RENDER_TIME_DEL
				PRINT(@NUMBER_UPDATE_RATE_DEL)
				PRINT(@SUM_DEL)

				WHILE (@@FETCH_STATUS = 0)
				BEGIN 
					UPDATE REVENUE_DETAILS SET RATE=@NUMBER_UPDATE_RATE_DEL/(@SUM_DEL - 1)
						WHERE ID_BRAND=@BRAND_UPDATE_RATE_DEL 
						AND MONTH(@RENDER_TIME_DEL) = MONTH( RENDER_TIME)
						AND YEAR(@RENDER_TIME_DEL) = YEAR(RENDER_TIME)
						AND ID_BRAND <> @ID_BRAND_DEL AND STATUS_RD=0 
						AND ID_GARA=@ID_GARA_DEL
					FETCH NEXT FROM CUR_UPDATE_RATE_INS_DEL INTO @BRAND_UPDATE_RATE_DEL,
					@NUMBER_UPDATE_RATE_DEL, @RENDER_TIME_DEL
				END
				CLOSE CUR_UPDATE_RATE_INS_DEL
				DEALLOCATE CUR_UPDATE_RATE_INS_DEL
			END
			FETCH NEXT FROM CUR_DEL INTO @ID_REC_DEL, @COMPLETE_TIME_DEL, @TOTAL_MONEY_DEL
		END
		CLOSE CUR_DEL
		DEALLOCATE CUR_DEL
	END
END

GO

----- DEBT = DEBT + (TOTAL_PAYMENT - PAID)

CREATE OR ALTER TRIGGER TG_CALCULATE_DEBT_INSERT
ON REPAIR_PAYMENT_BILL AFTER INSERT
AS
BEGIN
	DECLARE @ID_REC CHAR(10), @ID_CUS CHAR(10), @PAYMENT MONEY,@PAID MONEY
	DECLARE CURSOR_DEBT CURSOR FOR
		SELECT ID_REC, TOTAL_PAYMENT, PAID FROM INSERTED
	OPEN CURSOR_DEBT 
	FETCH NEXT FROM CURSOR_DEBT INTO @ID_REC, @PAYMENT, @PAID

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		SELECT @ID_CUS=ID_CUS FROM RECEPTION_FORMS 
			WHERE ID_REC=@ID_REC
		UPDATE CUSTOMERS SET DEBT=DEBT + (@PAYMENT-@PAID)
			WHERE ID_CUS=@ID_CUS
		FETCH NEXT FROM CURSOR_DEBT INTO @ID_REC, @PAYMENT, @PAID
	END
	CLOSE CURSOR_DEBT
	DEALLOCATE CURSOR_DEBT
END

GO

CREATE OR ALTER TRIGGER TG_CALCULATE_DEBT_DELETE
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF (UPDATE(STATUS_BILL))
	BEGIN
		DECLARE @ID_REC CHAR(10), @ID_CUS CHAR(10), @PAYMENT MONEY,@PAID MONEY
		DECLARE CURSOR_DEBT_DEL CURSOR FOR
			SELECT ID_REC, TOTAL_PAYMENT, PAID FROM DELETED
		OPEN CURSOR_DEBT_DEL
		FETCH NEXT FROM CURSOR_DEBT_DEL INTO @ID_REC, @PAYMENT, @PAID

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SELECT @ID_CUS=ID_CUS FROM RECEPTION_FORMS 
				WHERE ID_REC=@ID_REC
			UPDATE CUSTOMERS SET DEBT=DEBT - (@PAYMENT-@PAID)
				WHERE ID_CUS=@ID_CUS
			FETCH NEXT FROM CURSOR_DEBT_DEL INTO @ID_REC, @PAYMENT, @PAID
		END
		CLOSE CURSOR_DEBT_DEL
		DEALLOCATE CURSOR_DEBT_DEL
	END
END

GO

CREATE OR ALTER TRIGGER TG_CALCULATE_DEBT_UPDATE
ON REPAIR_PAYMENT_BILL AFTER UPDATE
AS
BEGIN
	IF(UPDATE(ID_REC) OR UPDATE(COMPLETION_DATE) 
	OR UPDATE(TOTAL_PAYMENT) OR UPDATE(PAID))
	BEGIN
			--- INSERT NEW VALUES
		DECLARE @ID_REC CHAR(10), @ID_CUS CHAR(10), @PAYMENT MONEY,@PAID MONEY
		DECLARE CURSOR_DEBT CURSOR FOR
			SELECT ID_REC, TOTAL_PAYMENT, PAID FROM INSERTED
		OPEN CURSOR_DEBT 
		FETCH NEXT FROM CURSOR_DEBT INTO @ID_REC, @PAYMENT, @PAID

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SELECT @ID_CUS=ID_CUS FROM RECEPTION_FORMS 
				WHERE ID_REC=@ID_REC
			UPDATE CUSTOMERS SET DEBT=DEBT + (@PAYMENT-@PAID)
				WHERE ID_CUS=@ID_CUS
			FETCH NEXT FROM CURSOR_DEBT INTO @ID_REC, @PAYMENT, @PAID
		END
		CLOSE CURSOR_DEBT
		DEALLOCATE CURSOR_DEBT

		---- DELETE OLD VALUES
		DECLARE @ID_REC_DEL CHAR(10), @ID_CUS_DEL CHAR(10),
			@PAYMENT_DEL MONEY,@PAID_DEL MONEY
		DECLARE CURSOR_DEBT_DEL CURSOR FOR
			SELECT ID_REC, TOTAL_PAYMENT, PAID FROM DELETED
		OPEN CURSOR_DEBT_DEL
		FETCH NEXT FROM CURSOR_DEBT_DEL INTO @ID_REC_DEL, @PAYMENT_DEL, @PAID_DEL

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SELECT @ID_CUS_DEL=ID_CUS FROM RECEPTION_FORMS 
				WHERE ID_REC=@ID_REC_DEL
			UPDATE CUSTOMERS SET DEBT=DEBT - (@PAYMENT_DEL-@PAID_DEL)
				WHERE ID_CUS=@ID_CUS_DEL
			FETCH NEXT FROM CURSOR_DEBT_DEL INTO @ID_REC_DEL, @PAYMENT_DEL, @PAID_DEL
		END
		CLOSE CURSOR_DEBT_DEL
		DEALLOCATE CURSOR_DEBT_DEL
	END
END

GO

---- PROCESS DATA IN INVENTORY TABLE AUTOMATICALLY

CREATE OR ALTER TRIGGER INSERT_NEW_ROW_INTO_INVENTORY_WHEN_INSERT_NEW_COMPONENTS
ON COMPONENT_DETAILS AFTER INSERT 
AS
BEGIN 
	DECLARE @ID_COM CHAR(10), @ID_GARA CHAR(10)
	DECLARE CUR_NEW_COM CURSOR FOR
		SELECT ID_COM, ID_GARA FROM INSERTED WHERE STATUS_DETAILS = 0
	OPEN CUR_NEW_COM
	FETCH NEXT FROM CUR_NEW_COM INTO @ID_COM, @ID_GARA

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		INSERT INTO INVENTORY_MANAGEMENT(ID_COM, ID_GARA, COM_QUANTITY)
			VALUES (@ID_COM, @ID_GARA, 0)
		FETCH NEXT FROM CUR_NEW_COM INTO @ID_COM, @ID_GARA
	END

	CLOSE CUR_NEW_COM
	DEALLOCATE CUR_NEW_COM
END

GO

CREATE OR ALTER TRIGGER UPDATE_ROW_INTO_INVENTORY_WHEN_INSERT_NEW_COMPONENTS
ON COMPONENT_DETAILS AFTER UPDATE
AS
BEGIN 
	IF(UPDATE(STATUS_DETAILS))
	BEGIN
		DECLARE @ID_COM CHAR(10), @ID_GARA CHAR(10)
		DECLARE CUR_NEW_COM CURSOR FOR
			SELECT ID_COM, ID_GARA FROM INSERTED WHERE STATUS_DETAILS=1
		OPEN CUR_NEW_COM
		FETCH NEXT FROM CUR_NEW_COM INTO @ID_COM, @ID_GARA

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DELETE FROM INVENTORY_MANAGEMENT 
				WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
			FETCH NEXT FROM CUR_NEW_COM INTO @ID_COM, @ID_GARA
		END

		CLOSE CUR_NEW_COM
		DEALLOCATE CUR_NEW_COM
	END
END
---------------------------------------------------------------
GO

CREATE OR ALTER TRIGGER INSERT_QUANTITY_INTO_INVENTORY_WHEN_INSERT_NEW_GRN_DETAILS
ON GRN_DETAILS AFTER INSERT
AS
BEGIN
	DECLARE @ID_COM CHAR(10),@COM_QUANTITY INT, @LOTNUMBER CHAR(10)
	DECLARE CUR_GRN_DETAILS CURSOR FOR
		SELECT LOTNUMBER, ID_COM, COM_QUANTITY FROM INSERTED
	OPEN CUR_GRN_DETAILS 
	FETCH NEXT FROM CUR_GRN_DETAILS INTO @LOTNUMBER, @ID_COM, @COM_QUANTITY

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		DECLARE @ID_GARA CHAR(10)
		SELECT @ID_GARA=ID_GARA FROM GOOD_RECEIVED_NOTES
			WHERE LOTNUMBER=@LOTNUMBER
		UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY + @COM_QUANTITY 
			WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
		FETCH NEXT FROM CUR_GRN_DETAILS INTO @LOTNUMBER, @ID_COM, @COM_QUANTITY
	END

	CLOSE CUR_GRN_DETAILS
	DEALLOCATE CUR_GRN_DETAILS
END

SELECT * FROM GOOD_RECEIVED_NOTES
SELECT * FROM GRN_DETAILS
SELECT * FROM INVENTORY_MANAGEMENT

GO
------ NOT ALLOW TO UPDATE LOTNUMBER IN GRN_DETAILS
CREATE OR ALTER TRIGGER UPDATE_NEW_QUANTITY_FOR_INVENTORY_TABLE_WHEN_INSERT_NEW_GRN_DETAILS
ON GRN_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(ID_COM) OR UPDATE(COM_QUANTITY))
	BEGIN
		
		--- INSERT NEW INFORMATION

		DECLARE @ID_COM CHAR(10),@COM_QUANTITY INT, @LOTNUMBER CHAR(10)
		DECLARE CUR_GRN_DETAILS CURSOR FOR
			SELECT LOTNUMBER, ID_COM, COM_QUANTITY FROM INSERTED
			WHERE STATUS_GRN=0
		OPEN CUR_GRN_DETAILS 
		FETCH NEXT FROM CUR_GRN_DETAILS INTO @LOTNUMBER, @ID_COM, @COM_QUANTITY

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA CHAR(10)
			SELECT @ID_GARA=ID_GARA FROM GOOD_RECEIVED_NOTES
				WHERE LOTNUMBER=@LOTNUMBER
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY + @COM_QUANTITY
				WHERE ID_COM = @ID_COM AND ID_GARA=@ID_GARA
			FETCH NEXT FROM CUR_GRN_DETAILS INTO @LOTNUMBER, @ID_COM, @COM_QUANTITY
		END

		CLOSE CUR_GRN_DETAILS
		DEALLOCATE CUR_GRN_DETAILS

		--- DELETE OLD INFORMATION

		DECLARE @ID_COM_OLD CHAR(10),@COM_QUANTITY_OLD INT, @LOTNUMBER_OLD CHAR(10)
		DECLARE CUR_GRN_DETAILS_OLD CURSOR FOR
			SELECT LOTNUMBER, ID_COM, COM_QUANTITY FROM DELETED
			WHERE STATUS_GRN=0
		OPEN CUR_GRN_DETAILS_OLD 
		FETCH NEXT FROM CUR_GRN_DETAILS_OLD INTO @LOTNUMBER_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10)
			SELECT @ID_GARA_OLD=ID_GARA FROM GOOD_RECEIVED_NOTES 
				WHERE LOTNUMBER=@LOTNUMBER_OLD
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY - @COM_QUANTITY_OLD
				WHERE ID_COM = @ID_COM_OLD AND ID_GARA=@ID_GARA_OLD
			FETCH NEXT FROM CUR_GRN_DETAILS_OLD INTO @LOTNUMBER_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD
		END

		CLOSE CUR_GRN_DETAILS_OLD
		DEALLOCATE CUR_GRN_DETAILS_OLD
	END

	---- DELETE ROW <=> SET STATUS = 1
	---- NOT ALLOW TO DELETE GRN_DETAILS ROW

	IF (UPDATE(STATUS_GRN))
	BEGIN
		DECLARE @ID_COM_DEL CHAR(10),@COM_QUANTITY_DEL INT, @LOTNUMBER_DEL CHAR(10)
		DECLARE CUR_GRN_DETAILS_DEL CURSOR FOR
			SELECT LOTNUMBER, ID_COM, COM_QUANTITY FROM INSERTED
			WHERE STATUS_GRN=1
		OPEN CUR_GRN_DETAILS_DEL
		FETCH NEXT FROM CUR_GRN_DETAILS_DEL INTO @LOTNUMBER_DEL, 
			@ID_COM_DEL, @COM_QUANTITY_DEL

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_DEL CHAR(10)
			SELECT @ID_GARA_DEL=ID_GARA FROM GOOD_RECEIVED_NOTES 
				WHERE LOTNUMBER=@LOTNUMBER_DEL
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY - @COM_QUANTITY_DEL
				WHERE ID_COM = @ID_COM_DEL AND ID_GARA=@ID_GARA_DEL
			FETCH NEXT FROM CUR_GRN_DETAILS_DEL INTO @LOTNUMBER_DEL, @ID_COM_DEL, @COM_QUANTITY_DEL
		END

		CLOSE CUR_GRN_DETAILS_DEL
		DEALLOCATE CUR_GRN_DETAILS_DEL
	END
END

GO

CREATE OR ALTER TRIGGER INSERT_NEW_INCURRED_COST
ON INCURRED_COSTS AFTER INSERT
AS
BEGIN
	DECLARE @ID_COM CHAR(10), @COM_QUANTITY INT, @ID_GARA CHAR(10)
	DECLARE CUR_INS_INCUR CURSOR FOR
		SELECT ID_GARA, ID_COM, COM_QUANTITY FROM INSERTED
		WHERE STATUS_IC=0
	OPEN CUR_INS_INCUR
	FETCH NEXT FROM CUR_INS_INCUR INTO @ID_GARA, @ID_COM, @COM_QUANTITY

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY - @COM_QUANTITY
			WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
		FETCH NEXT FROM CUR_INS_INCUR INTO @ID_GARA, @ID_COM, @COM_QUANTITY
	END

	CLOSE CUR_INS_INCUR
	DEALLOCATE CUR_INS_INCUR
END

GO

CREATE OR ALTER TRIGGER UPDATE_NEW_INCURRED_COST
ON INCURRED_COSTS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(ID_COM) OR UPDATE(COM_QUANTITY))
	BEGIN

		---- INSERT NEW INFORMATION

		DECLARE @ID_COM CHAR(10), @COM_QUANTITY INT, @ID_GARA CHAR(10)
		DECLARE CUR_INS_INCUR CURSOR FOR
			SELECT ID_GARA, ID_COM, COM_QUANTITY FROM INSERTED
			WHERE STATUS_IC=0
		OPEN CUR_INS_INCUR
		FETCH NEXT FROM CUR_INS_INCUR INTO @ID_GARA, @ID_COM, @COM_QUANTITY

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY - @COM_QUANTITY
				WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
			FETCH NEXT FROM CUR_INS_INCUR INTO @ID_GARA, @ID_COM, @COM_QUANTITY
		END

		CLOSE CUR_INS_INCUR
		DEALLOCATE CUR_INS_INCUR

		---- DELETE OLD INFORMATION

		DECLARE @ID_COM_OLD CHAR(10), @COM_QUANTITY_OLD INT, @ID_GARA_OLD CHAR(10)
		DECLARE CUR_INS_INCUR_OLD CURSOR FOR
			SELECT ID_GARA, ID_COM, COM_QUANTITY FROM DELETED
			WHERE STATUS_IC=0
		OPEN CUR_INS_INCUR_OLD
		FETCH NEXT FROM CUR_INS_INCUR_OLD INTO @ID_GARA_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY + @COM_QUANTITY_OLD
				WHERE ID_COM=@ID_COM_OLD AND ID_GARA=@ID_GARA_OLD
			FETCH NEXT FROM CUR_INS_INCUR_OLD INTO @ID_GARA_OLD, @ID_COM_OLD, @COM_QUANTITY_OLD
		END

		CLOSE CUR_INS_INCUR_OLD
		DEALLOCATE CUR_INS_INCUR_OLD
	END

	---- DELETE ROW
	IF (UPDATE(STATUS_IC))
	BEGIN
		DECLARE @ID_COM_DEL CHAR(10), @COM_QUANTITY_DEL INT, @ID_GARA_DEL CHAR(10)
		DECLARE CUR_INS_INCUR_DEL CURSOR FOR
			SELECT ID_GARA, ID_COM, COM_QUANTITY FROM INSERTED
			WHERE STATUS_IC=1
		OPEN CUR_INS_INCUR_DEL
		FETCH NEXT FROM CUR_INS_INCUR_DEL INTO @ID_GARA_DEL, @ID_COM_DEL, @COM_QUANTITY_DEL

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY + @COM_QUANTITY_DEL
				WHERE ID_COM=@ID_COM_DEL AND ID_GARA=@ID_GARA_DEL
			FETCH NEXT FROM CUR_INS_INCUR_DEL INTO @ID_GARA_DEL, @ID_COM_DEL, @COM_QUANTITY_DEL
		END

		CLOSE CUR_INS_INCUR_DEL
		DEALLOCATE CUR_INS_INCUR_DEL
	END
END

GO

CREATE OR ALTER TRIGGER INSERT_NEW_BILL_DETAILS
ON REPAIR_PAYMENT_DETAILS AFTER INSERT
AS
BEGIN	
	DECLARE @ID_COM CHAR(10), @COM_QUANTITY INT, @ID_BILL CHAR(10)
	DECLARE CUR_BILL_INS CURSOR FOR
		SELECT ID_COM, COM_QUANTITY, ID_BILL FROM INSERTED
		WHERE STATUS_RPD = 0
	OPEN CUR_BILL_INS 
	FETCH NEXT FROM CUR_BILL_INS INTO @ID_COM, @COM_QUANTITY, @ID_BILL

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		DECLARE @ID_GARA CHAR(10), @ID_REC CHAR(10)
		SELECT @ID_REC=ID_REC FROM REPAIR_PAYMENT_BILL WHERE ID_BILL=@ID_BILL
		SELECT @ID_GARA=ID_GARA FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC
		UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY - @COM_QUANTITY
			WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
		FETCH NEXT FROM CUR_BILL_INS INTO @ID_COM, @COM_QUANTITY, @ID_BILL
	END

	CLOSE CUR_BILL_INS
	DEALLOCATE CUR_BILL_INS
END

GO

CREATE OR ALTER TRIGGER UPD_NEW_BILL_DETAILS
ON REPAIR_PAYMENT_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(ID_COM) OR UPDATE(COM_QUANTITY))
	BEGIN	

		---- INSERT NEW VALUES

		DECLARE @ID_COM CHAR(10), @COM_QUANTITY INT, @ID_BILL CHAR(10)
		DECLARE CUR_BILL_INSS CURSOR FOR
			SELECT ID_COM, COM_QUANTITY, ID_BILL FROM INSERTED
			WHERE STATUS_RPD = 0
		OPEN CUR_BILL_INSS
		FETCH NEXT FROM CUR_BILL_INSS INTO @ID_COM, @COM_QUANTITY, @ID_BILL

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA CHAR(10), @ID_REC CHAR(10)
			SELECT @ID_REC=ID_REC FROM REPAIR_PAYMENT_BILL WHERE ID_BILL=@ID_BILL
			SELECT @ID_GARA=ID_GARA FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY - @COM_QUANTITY
				WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA
			FETCH NEXT FROM CUR_BILL_INSS INTO @ID_COM, @COM_QUANTITY, @ID_BILL
		END

		CLOSE CUR_BILL_INSS
		DEALLOCATE CUR_BILL_INSS
		--- DELETE OLD VALUES

		DECLARE @ID_COM_OLD CHAR(10), @COM_QUANTITY_OLD INT, @ID_BILL_OLD CHAR(10)
		DECLARE CUR_BILL_INS_OLD CURSOR FOR
			SELECT ID_COM, COM_QUANTITY, ID_BILL FROM DELETED
			WHERE STATUS_RPD = 0
		OPEN CUR_BILL_INS_OLD 
		FETCH NEXT FROM CUR_BILL_INS_OLD INTO @ID_COM_OLD, @COM_QUANTITY_OLD, @ID_BILL_OLD

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_OLD CHAR(10), @ID_REC_OLD CHAR(10)
			SELECT @ID_REC_OLD=ID_REC FROM REPAIR_PAYMENT_BILL WHERE ID_BILL=@ID_BILL_OLD
			SELECT @ID_GARA_OLD=ID_GARA FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC_OLD
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY + @COM_QUANTITY_OLD
				WHERE ID_COM=@ID_COM_OLD AND ID_GARA=@ID_GARA_OLD
			FETCH NEXT FROM CUR_BILL_INS_OLD INTO @ID_COM_OLD, @COM_QUANTITY_OLD, @ID_BILL_OLD
		END

		CLOSE CUR_BILL_INS_OLD
		DEALLOCATE CUR_BILL_INS_OLD

	END

	IF (UPDATE(STATUS_RPD))
	BEGIN
		DECLARE @ID_COM_DEL CHAR(10), @COM_QUANTITY_DEL INT, @ID_BILL_DEL CHAR(10)
		DECLARE CUR_BILL_INS_DEL CURSOR FOR
			SELECT ID_COM, COM_QUANTITY, ID_BILL FROM INSERTED
			WHERE STATUS_RPD = 1
		OPEN CUR_BILL_INS_DEL 
		FETCH NEXT FROM CUR_BILL_INS_DEL INTO @ID_COM_DEL, @COM_QUANTITY_DEL, @ID_BILL_DEL

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			DECLARE @ID_GARA_DEL CHAR(10), @ID_REC_DEL CHAR(10)
			SELECT @ID_REC_DEL=ID_REC FROM REPAIR_PAYMENT_BILL WHERE ID_BILL=@ID_BILL_DEL
			SELECT @ID_GARA_DEL=ID_GARA FROM RECEPTION_FORMS WHERE ID_REC=@ID_REC_DEL
			UPDATE INVENTORY_MANAGEMENT SET COM_QUANTITY=COM_QUANTITY - @COM_QUANTITY_DEL
				WHERE ID_COM=@ID_COM_DEL AND ID_GARA=@ID_GARA_DEL
			FETCH NEXT FROM CUR_BILL_INS_DEL INTO @ID_COM_DEL, @COM_QUANTITY_DEL, @ID_BILL_DEL
		END

		CLOSE CUR_BILL_INS_DEL
		DEALLOCATE CUR_BILL_INS_DEL
	END
END

GO

SELECT * FROM GOOD_RECEIVED_NOTES
SELECT * FROM GRN_DETAILS

GO

CREATE OR ALTER TRIGGER INSERT_CUR_PRICE_IN_COMPONENT_DETAILS
ON GRN_DETAILS AFTER INSERT
AS
BEGIN
	DECLARE @LOTNUMBER CHAR(10), @ID_COM CHAR(10), @PRICE MONEY
	DECLARE CUR_UPDATE_CUR_PRICE_INS CURSOR FOR
		SELECT LOTNUMBER, ID_COM, COM_PRICE FROM INSERTED
		WHERE STATUS_GRN = 0
	OPEN CUR_UPDATE_CUR_PRICE_INS
	FETCH NEXT FROM CUR_UPDATE_CUR_PRICE_INS INTO @LOTNUMBER, @ID_COM, @PRICE

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		 DECLARE @ID_GARA CHAR(10)
		 SELECT @ID_GARA=ID_GARA FROM GOOD_RECEIVED_NOTES WHERE LOTNUMBER=@LOTNUMBER
		 UPDATE COMPONENT_DETAILS SET CUR_PRICE=@PRICE
			WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA AND STATUS_DETAILS=0
		FETCH NEXT FROM CUR_UPDATE_CUR_PRICE_INS INTO @LOTNUMBER, @ID_COM, @PRICE
	END
	
	CLOSE CUR_UPDATE_CUR_PRICE_INS
	DEALLOCATE CUR_UPDATE_CUR_PRICE_INS

END

GO

CREATE OR ALTER TRIGGER UPDATE_CUR_PRICE_IN_COMPONENT_DETAILS
ON GRN_DETAILS AFTER UPDATE
AS
BEGIN
	IF (UPDATE(ID_COM) OR UPDATE(COM_PRICE))
	BEGIN
		DECLARE @LOTNUMBER CHAR(10), @ID_COM CHAR(10), @PRICE MONEY
		DECLARE CUR_UPDATE_CUR_PRICE_INS CURSOR FOR
			SELECT LOTNUMBER, ID_COM, COM_PRICE FROM INSERTED
			WHERE STATUS_GRN = 0
		OPEN CUR_UPDATE_CUR_PRICE_INS
		FETCH NEXT FROM CUR_UPDATE_CUR_PRICE_INS INTO @LOTNUMBER, @ID_COM, @PRICE

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			 DECLARE @ID_GARA CHAR(10)
			 SELECT @ID_GARA=ID_GARA FROM GOOD_RECEIVED_NOTES WHERE LOTNUMBER=@LOTNUMBER
			 UPDATE COMPONENT_DETAILS SET CUR_PRICE=@PRICE
				WHERE ID_COM=@ID_COM AND ID_GARA=@ID_GARA AND STATUS_DETAILS=0
			FETCH NEXT FROM CUR_UPDATE_CUR_PRICE_INS INTO @LOTNUMBER, @ID_COM, @PRICE
		END
	
		CLOSE CUR_UPDATE_CUR_PRICE_INS
		DEALLOCATE CUR_UPDATE_CUR_PRICE_INS
	END
END

GO

